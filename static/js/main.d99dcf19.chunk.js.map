{"version":3,"sources":["components/AnimeComponents/AnimeCard/AnimeCard.tsx","components/EpisodeComponents/EpisodeCard/EpisodeCard.tsx","components/Gallery/Gallery.tsx","components/Title/Title.tsx","components/Header/NavLink/NavLink.tsx","components/Header/InputSearch/InputSearch.tsx","components/Header/Header.tsx","components/Banner/Banner.tsx","components/Forms/AnimeForm/AnimeForm.tsx","components/Forms/EpisodeForm/EpisodeForm.tsx","components/AnimeComponents/AnimeView/AnimeView.tsx","components/EpisodeComponents/EpisodeView/EpisodeView.tsx","utils/Theme.ts","components/StudioView/StudioView.tsx","components/App/App.tsx","reportWebVitals.ts","index.tsx"],"names":["AnimeCard","id","name","cover","history","useHistory","className","onClick","push","src","alt","EpisodeCard","episode","thumbnail","anime","number","Gallery","type","listAnime","listEpisode","withoutPadding","undefined","map","Title","text","url","href","NavLink","activeClassName","to","InputSearch","placeholder","Header","process","Banner","animeList","React","currentIndex","setCurrentIndex","setName","img","setImg","styles","backgroundImage","style","elem","i","arr","index","AnimeForm","tagOptions","editId","animeElems","onCreate","addTagOption","onEdit","editAnimeElem","find","setFormSubmitted","description","setDescription","setCover","status","setStatus","handleStatusChange","event","target","value","console","log","tags","setTags","isNameValid","length","isDescriptionValid","onSubmit","preventDefault","tagsStrings","obj","label","Math","random","episodes","studios","onChange","cols","rows","Autocomplete","multiple","freeSolo","disableClearable","width","margin","options","renderInput","params","TextField","values","transformed","op","isOptionEqualToValue","option","EpisodeForm","studioOptions","setNumber","date","setDate","setThumbnail","videoUrl","setVideoUrl","studioId","setStudioId","isNumberValid","isDateValid","isThumbnailValid","isVideoUrl","isStudiosId","parseInt","studio","getOptionLabel","AnimeView","list","onCreateEpisode","idString","useParams","parseFloat","handleViewStudio","tag","path","newEpisodeElem","EpisodeView","allow","theme","createTheme","palette","primary","main","secondary","StudioView","listStudio","elemStudio","logo","animes","App","useState","animeFormType","setAnimeFormType","animeEditId","setAnimeEditId","animesBanner","studioElems","episodeElems","setEpisodeElems","setAnimeElems","setTagOptions","initialStudioOptions","exact","animeId","animeIndex","findIndex","studioIndex","episodesCopy","studioExist","animeExist","newAnimeElem","arrayCopy","newTagOption","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d99dcf19.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport \"./AnimeCard.css\";\r\n\r\nexport interface AnimeCardProps {\r\n   id: number;\r\n   name: string;\r\n   cover: string;\r\n}\r\n\r\nconst AnimeCard: React.FC<AnimeCardProps> = ({id, name, cover}) => {\r\n   const history = useHistory();\r\n\r\n   const handleView = () => {\r\n      history.push(`/anime-details/${id}`);\r\n   };\r\n\r\n   return (\r\n      <div className=\"AnimeCard\" onClick={handleView}>\r\n         <img className=\"AnimeCard__img\" src={cover} alt=\"anime cover\" />\r\n         <figcaption className=\"AnimeCard__figcaption\">\r\n            <p>{name}</p>\r\n         </figcaption>\r\n      </div>\r\n   );\r\n};\r\n\r\nexport default AnimeCard;\r\n","import * as React from \"react\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {EpisodeObj} from \"../../../Types/EpisodeObj\";\r\nimport \"./EpisodeCard.css\";\r\n\r\nexport interface EpisodeCardProps {\r\n   episode: EpisodeObj;\r\n}\r\n\r\nconst EpisodeCard: React.FC<EpisodeCardProps> = ({episode}) => {\r\n   const history = useHistory();\r\n\r\n   const handleView = () => {\r\n      history.push(`/episode-details/${episode.id}`);\r\n   };\r\n\r\n   return (\r\n      <div className=\"EpisodeCard\" onClick={handleView}>\r\n         <img className=\"EpisodeCard__img\" src={episode.thumbnail} alt=\"episode cover\" />\r\n         <figcaption className=\"EpisodeCard__figcaption\">\r\n            <h1>{episode.anime?.name}</h1>\r\n            <h2>Episode {episode.number}</h2>\r\n         </figcaption>\r\n      </div>\r\n   );\r\n};\r\n\r\nexport default EpisodeCard;\r\n","import * as React from \"react\";\r\nimport \"./Gallery.css\";\r\nimport {AnimeObj} from \"../../Types/AnimeObj\";\r\nimport {EpisodeObj} from \"../../Types/EpisodeObj\";\r\nimport AnimeCard from \"../AnimeComponents/AnimeCard/AnimeCard\";\r\nimport EpisodeCard from \"../EpisodeComponents/EpisodeCard/EpisodeCard\";\r\n\r\ninterface GalleryProps {\r\n   type: \"Anime\" | \"Episode\";\r\n   listAnime?: AnimeObj[];\r\n   listEpisode?: EpisodeObj[];\r\n   withoutPadding?: boolean;\r\n}\r\n\r\nconst Gallery: React.FC<GalleryProps> = ({type, listAnime, listEpisode, withoutPadding}) => {\r\n   return (\r\n      <section className={withoutPadding ? \"gallery gallery--withoutPadding\" : \"gallery\"}>\r\n         <div className=\"gallery__row\">\r\n            {type === \"Episode\" && listEpisode !== undefined\r\n               ? listEpisode.map((episode) => {\r\n                    return <EpisodeCard key={episode.id} episode={episode} />;\r\n                 })\r\n               : type === \"Anime\" && listAnime !== undefined\r\n               ? listAnime.map((anime) => {\r\n                    return <AnimeCard key={anime.id} id={anime.id} name={anime.name} cover={anime.cover} />;\r\n                 })\r\n               : \"Error no se cargo la vista previa\"}\r\n         </div>\r\n      </section>\r\n   );\r\n};\r\n\r\nexport default Gallery;\r\n","import * as React from \"react\";\r\nimport \"./Title.css\";\r\n\r\ninterface TitleProps {\r\n    text: string;\r\n    url: string;\r\n}\r\n\r\nconst Title: React.FC<TitleProps> = ({text, url}) => {\r\n    return (\r\n        <div className=\"Title\">\r\n            <h2>{text}</h2>\r\n            <a href={url}>See All</a>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Title;\r\n","import * as React from \"react\";\r\nimport {NavLink as Rlink} from \"react-router-dom\";\r\nimport \"./NavLink.css\";\r\n\r\ninterface NavLinkProps {\r\n   text: string;\r\n   url: string;\r\n}\r\n\r\nconst NavLink: React.FC<NavLinkProps> = ({text, url}) => {\r\n   return (\r\n      <Rlink className=\"Link\" activeClassName=\"Link--active\" to={url}>\r\n         {text}\r\n      </Rlink>\r\n   );\r\n};\r\n\r\nexport default NavLink;\r\n","import * as React from \"react\";\r\nimport \"./InputSearch.css\";\r\n\r\ninterface InputSearchProps {}\r\n\r\nconst InputSearch: React.FC<InputSearchProps> = ({}) => {\r\n   return (\r\n      <div className=\"inputSearch\">\r\n         <input type=\"text\" placeholder=\"What do you want to search?\" />\r\n         <span className=\"inputSearch__Icon material-icons-round md-dark\">search</span>\r\n      </div>\r\n   );\r\n};\r\n\r\nexport default InputSearch;\r\n","import * as React from \"react\";\r\nimport \"./Header.css\";\r\nimport NavLink from \"./NavLink/NavLink\";\r\nimport InputSearch from \"./InputSearch/InputSearch\";\r\nimport {useHistory} from \"react-router\";\r\n\r\ninterface HeaderProps {}\r\n\r\nconst Header: React.FC<HeaderProps> = ({}) => {\r\n   const history = useHistory();\r\n\r\n   const handleHomeClick: any = () => {\r\n      history.push(\"/\");\r\n   };\r\n\r\n   return (\r\n      <header className=\"header\">\r\n         <div className=\"header__section\">\r\n            <img\r\n               className=\"header__logo\"\r\n               src={`${process.env.PUBLIC_URL}/images/General/logo.svg`}\r\n               alt=\"\"\r\n               onClick={handleHomeClick}\r\n            />\r\n            <nav>\r\n               <NavLink text=\"Forms\" url=\"/Forms\" />\r\n               <NavLink text=\"Studios\" url=\"/Studios\" />\r\n            </nav>\r\n         </div>\r\n\r\n         <div className=\"header__section\">\r\n            <InputSearch />\r\n         </div>\r\n      </header>\r\n   );\r\n};\r\n\r\nexport default Header;\r\n","import * as React from \"react\";\r\nimport \"./Banner.css\";\r\nimport {BannerObj} from \"../../Types/BannerObj\";\r\n\r\ninterface BannerProps {\r\n   animeList: BannerObj[];\r\n}\r\n\r\nconst Banner: React.FC<BannerProps> = ({animeList}) => {\r\n   const [currentIndex, setCurrentIndex] = React.useState(0);\r\n   const [name, setName] = React.useState(animeList[0].name);\r\n   const [img, setImg] = React.useState(animeList[0].img);\r\n\r\n   const styles: React.CSSProperties = {\r\n      backgroundImage: `url(${img})`,\r\n   };\r\n\r\n   const handleChangeBanner = (index: number) => () => {\r\n      setName(animeList[index].name);\r\n      setImg(animeList[index].img);\r\n      setCurrentIndex(index);\r\n   };\r\n\r\n   return (\r\n      <article className=\"Banner\" style={styles}>\r\n         <img src=\"\" alt=\"\" />\r\n         <h1 className=\"Banner__Name\">{name}</h1>\r\n         <section className=\"Banner__Btns\">\r\n            {animeList.map((elem, i, arr) => {\r\n               return (\r\n                  <div\r\n                     key={elem.id}\r\n                     className={currentIndex === i ? \"Banner__BtnNav Banner__BtnNav--selected\" : \"Banner__BtnNav\"}\r\n                     onClick={handleChangeBanner(i)}\r\n                  />\r\n               );\r\n            })}\r\n         </section>\r\n      </article>\r\n   );\r\n};\r\n\r\nexport default Banner;\r\n","import * as React from \"react\";\r\nimport {useHistory} from \"react-router\";\r\nimport {AnimeObj} from \"../../../Types/AnimeObj\";\r\nimport {Autocomplete, TextField} from \"@mui/material\";\r\nimport {TagOption} from \"../../../Types/TagOption\";\r\n\r\ninterface AnimeFormProps {\r\n   tagOptions: TagOption[];\r\n   type: \"create\" | \"edit\";\r\n   editId: number | null;\r\n   animeElems: AnimeObj[];\r\n\r\n   onCreate: (newAnimeElem: AnimeObj) => void;\r\n   addTagOption: (newTagOption: TagOption) => void;\r\n   onEdit: (editId: number, newAnimeElem: AnimeObj) => void;\r\n}\r\n\r\nconst AnimeForm: React.FC<AnimeFormProps> = ({\r\n   tagOptions,\r\n   type,\r\n   editId,\r\n   animeElems,\r\n   onCreate,\r\n   addTagOption,\r\n   onEdit,\r\n}) => {\r\n   const history = useHistory();\r\n\r\n   const editAnimeElem = animeElems.find((elem) => {\r\n      return elem.id === editId;\r\n   });\r\n\r\n   const [formSubmitted, setFormSubmitted] = React.useState(false);\r\n\r\n   const [name, setName] = React.useState(editAnimeElem?.name || \"\");\r\n   const handleNameChange: React.ChangeEventHandler<HTMLInputElement> = (event) => {\r\n      setName(event.target.value);\r\n   };\r\n\r\n   const [description, setDescription] = React.useState(editAnimeElem?.description || \"\");\r\n   const handleDescriptionChange: React.ChangeEventHandler<HTMLTextAreaElement> = (event) => {\r\n      setDescription(event.target.value);\r\n   };\r\n\r\n   const [cover, setCover] = React.useState(\"\");\r\n   const handleCoverChange: React.ChangeEventHandler<HTMLInputElement> = (event) => {\r\n      setCover(event.target.value);\r\n   };\r\n\r\n   const [status, setStatus] = React.useState(editAnimeElem?.status || \"\");\r\n   const handleStatusChange: React.ChangeEventHandler<HTMLInputElement> = (event) => {\r\n      setStatus(event.target.value);\r\n      console.log(status);\r\n   };\r\n\r\n   const initialTags: TagOption[] = [];\r\n\r\n   const [tags, setTags] = React.useState<TagOption[]>(initialTags);\r\n   const handleTagsChange = (event: React.SyntheticEvent<Element, Event>, values: (TagOption | string)[]) => {\r\n      const transformed = values.map((value) => {\r\n         // si el valor es un string, quiere decir que el usurio está agregando una nueva opción\r\n         if (typeof value === \"string\") {\r\n            const op = {label: value};\r\n            addTagOption(op); // agregamos la nueva opción a la lista general de opciones\r\n            return op;\r\n         }\r\n         return value;\r\n      });\r\n      setTags(transformed);\r\n   };\r\n\r\n   //validaciones\r\n\r\n   const isNameValid: boolean = name !== \"\" && name.length >= 5;\r\n   const isDescriptionValid: boolean = description !== \"\" && name.length >= 5;\r\n   const isCoverValid: boolean = cover !== \"\";\r\n   const isStatusValid: boolean = status !== \"\";\r\n   const isTagsValid: boolean = tags !== [];\r\n\r\n   const handleSubmit: React.FormEventHandler<HTMLFormElement> = (event: any) => {\r\n      event.preventDefault();\r\n      setFormSubmitted(true);\r\n\r\n      const tagsStrings = tags.map((obj) => obj.label);\r\n\r\n      if (type === \"create\" && isNameValid && isDescriptionValid) {\r\n         const anime: AnimeObj = {\r\n            id: Math.random(),\r\n            name: name,\r\n            cover: `${process.env.PUBLIC_URL}/images/Covers/` + cover,\r\n            description: description,\r\n            status: status,\r\n            tags: tagsStrings,\r\n            episodes: [],\r\n            studios: [],\r\n         };\r\n         onCreate(anime);\r\n\r\n         history.push(\"/\");\r\n      } else if (type === \"edit\") {\r\n         const anime: AnimeObj = {\r\n            id: Math.random(),\r\n            name: name,\r\n            cover: `${process.env.PUBLIC_URL}/images/Covers/` + cover,\r\n            description: description,\r\n            status: status,\r\n            tags: tagsStrings,\r\n            episodes: [],\r\n            studios: [],\r\n         };\r\n         onEdit(editId!, anime);\r\n         history.push(\"/\");\r\n      }\r\n      // si el formulario es válido, llamamos al evento onCreate\r\n   };\r\n\r\n   return (\r\n      <section>\r\n         <form className=\"Form\" onSubmit={handleSubmit}>\r\n            <h2>{type === \"create\" ? \"Create\" : \"Edit\"} AnimeObj</h2>\r\n            <label className=\"input\">\r\n               Name\r\n               <input type=\"text\" onChange={handleNameChange} value={name} placeholder=\"Name\" />\r\n            </label>\r\n\r\n            <label className=\"input\">\r\n               Cover\r\n               <input type=\"text\" onChange={handleCoverChange} value={cover} placeholder=\"Cover\" />\r\n            </label>\r\n\r\n            <label className=\"input\">\r\n               Description\r\n               <textarea\r\n                  onChange={handleDescriptionChange}\r\n                  value={description}\r\n                  placeholder=\"Description\"\r\n                  cols={30}\r\n                  rows={10}\r\n               />\r\n            </label>\r\n\r\n            <div className=\"Form__Status\">\r\n               <p>Status</p>\r\n\r\n               <div className=\"Form__Status__inputContainer\">\r\n                  <div className=\"input--radio\">\r\n                     <input type=\"radio\" name=\"status\" value=\"Finish\" onChange={handleStatusChange} />\r\n                     <label>Finish</label>\r\n                  </div>\r\n\r\n                  <div className=\"input--radio\">\r\n                     <input type=\"radio\" name=\"status\" value=\"In Broadcast\" onChange={handleStatusChange} />\r\n                     <label>In Broadcast</label>\r\n                  </div>\r\n               </div>\r\n            </div>\r\n\r\n            <Autocomplete\r\n               multiple\r\n               freeSolo\r\n               disableClearable\r\n               style={{\r\n                  width: \"100%\",\r\n                  margin: \"16px\",\r\n               }}\r\n               id=\"combo-box-demo\"\r\n               options={tagOptions}\r\n               renderInput={(params) => <TextField {...params} label=\"Tags\" placeholder=\"Add a tag\" />}\r\n               onChange={handleTagsChange}\r\n               value={tags as any}\r\n               isOptionEqualToValue={(option, value) => {\r\n                  return option.label === value.label;\r\n               }}\r\n            />\r\n\r\n            <button className=\"Btn\">{type === \"create\" ? \"Create\" : \"Edit\"} Anime</button>\r\n         </form>\r\n      </section>\r\n   );\r\n};\r\n\r\nexport default AnimeForm;\r\n","import {Autocomplete, TextField} from \"@mui/material\";\r\nimport * as React from \"react\";\r\nimport {useHistory} from \"react-router\";\r\nimport {EpisodeObj} from \"../../../Types/EpisodeObj\";\r\nimport {studioOption} from \"../../../Types/StudiosOption\";\r\n\r\ninterface EpisodeFormProps {\r\n   studioOptions: studioOption[];\r\n   onCreate: (newEpisodeElem: EpisodeObj, studioId: number) => void;\r\n}\r\n\r\nconst EpisodeForm: React.FC<EpisodeFormProps> = ({studioOptions, onCreate}) => {\r\n   const history = useHistory();\r\n\r\n   const [name, setName] = React.useState(\"\");\r\n   const handleNameChange: React.ChangeEventHandler<HTMLInputElement> = (event) => {\r\n      setName(event.target.value);\r\n   };\r\n\r\n   const [number, setNumber] = React.useState(\"\");\r\n   const handleNumberChange: React.ChangeEventHandler<HTMLInputElement> = (event) => {\r\n      setNumber(event.target.value);\r\n   };\r\n\r\n   const [description, setDescription] = React.useState(\"\");\r\n   const handleDescriptionChange: React.ChangeEventHandler<HTMLTextAreaElement> = (event) => {\r\n      setDescription(event.target.value);\r\n   };\r\n\r\n   const [date, setDate] = React.useState(\"\");\r\n   const handleDateChange: React.ChangeEventHandler<HTMLInputElement> = (event) => {\r\n      setDate(event.target.value);\r\n   };\r\n\r\n   const [thumbnail, setThumbnail] = React.useState(\"\");\r\n   const handleThumbnailChange: React.ChangeEventHandler<HTMLInputElement> = (event) => {\r\n      setThumbnail(event.target.value);\r\n   };\r\n\r\n   const [videoUrl, setVideoUrl] = React.useState(\"\");\r\n   const handleVideoUrlChange: React.ChangeEventHandler<HTMLInputElement> = (event) => {\r\n      setVideoUrl(event.target.value);\r\n   };\r\n\r\n   const [studioId, setStudioId] = React.useState<number>(0.59);\r\n\r\n   const handleStudioIdChange = (event: React.SyntheticEvent<Element, Event>, values: studioOption) => {\r\n      setStudioId(values.id);\r\n   };\r\n\r\n   const isNameValid: boolean = name !== \"\" && name.length >= 5;\r\n   const isNumberValid: boolean = number !== \"\";\r\n   const isDescriptionValid: boolean = description !== \"\";\r\n   const isDateValid: boolean = date !== \"\";\r\n   const isThumbnailValid: boolean = thumbnail !== \"\";\r\n   const isVideoUrl: boolean = videoUrl !== \"\";\r\n   const isStudiosId: boolean = studioId !== 0.59;\r\n\r\n   const handleSubmit: React.FormEventHandler<HTMLFormElement> = (event: any) => {\r\n      event.preventDefault();\r\n\r\n      if (\r\n         isNameValid &&\r\n         isNumberValid &&\r\n         isDescriptionValid &&\r\n         isDateValid &&\r\n         isThumbnailValid &&\r\n         isVideoUrl &&\r\n         isStudiosId\r\n      ) {\r\n         const episode: EpisodeObj = {\r\n            id: Math.random(),\r\n            name: name,\r\n            number: parseInt(number),\r\n            description: description,\r\n            date: date,\r\n            thumbnail: thumbnail,\r\n            videoUrl: videoUrl,\r\n\r\n            anime: undefined,\r\n            studio: undefined,\r\n         };\r\n\r\n         onCreate(episode, studioId);\r\n\r\n         history.push(\"/\");\r\n      }\r\n      // si el formulario es válido, llamamos al evento onCreate\r\n   };\r\n\r\n   return (\r\n      <section className=\"Form__Container\">\r\n         <form className=\"Form\" onSubmit={handleSubmit}>\r\n            <h2>Create EpisodeObj</h2>\r\n\r\n            <label className=\"input\">\r\n               Name\r\n               <input type=\"text\" onChange={handleNameChange} value={name} placeholder=\"Cover\" />\r\n            </label>\r\n\r\n            <label className=\"input\">\r\n               Number\r\n               <input type=\"number\" onChange={handleNumberChange} value={number} placeholder=\"Cover\" />\r\n            </label>\r\n\r\n            <label className=\"input\">\r\n               Description\r\n               <textarea\r\n                  onChange={handleDescriptionChange}\r\n                  value={description}\r\n                  placeholder=\"Description\"\r\n                  cols={30}\r\n                  rows={10}\r\n               />\r\n            </label>\r\n\r\n            <label className=\"input\">\r\n               Date\r\n               <input type=\"text\" onChange={handleDateChange} value={date} placeholder=\"Cover\" />\r\n            </label>\r\n\r\n            <label className=\"input\">\r\n               Thumbnail\r\n               <input type=\"text\" onChange={handleThumbnailChange} value={thumbnail} placeholder=\"Cover\" />\r\n            </label>\r\n\r\n            <label className=\"input\">\r\n               VideoUrl\r\n               <input type=\"text\" onChange={handleVideoUrlChange} value={videoUrl} placeholder=\"Cover\" />\r\n            </label>\r\n\r\n            <Autocomplete\r\n               disableClearable\r\n               style={{\r\n                  width: \"100%\",\r\n                  margin: \"16px\",\r\n               }}\r\n               id=\"combo-box-demo\"\r\n               options={studioOptions}\r\n               getOptionLabel={(option) => option.label}\r\n               renderInput={(params) => <TextField {...params} label=\"Studios\" placeholder=\"Add a tag\" />}\r\n               onChange={handleStudioIdChange}\r\n               //value={tags as any}\r\n               isOptionEqualToValue={(option, value) => {\r\n                  return option.label === value.label;\r\n               }}\r\n            />\r\n\r\n            <button className=\"Btn\">Create Episode</button>\r\n         </form>\r\n      </section>\r\n   );\r\n};\r\n\r\nexport default EpisodeForm;\r\n","import * as React from \"react\";\r\nimport \"./AnimeView.css\";\r\nimport {Redirect, useHistory, useParams, Route} from \"react-router\";\r\n\r\nimport {AnimeObj} from \"../../../Types/AnimeObj\";\r\nimport {studioOption} from \"../../../Types/StudiosOption\";\r\nimport {EpisodeObj} from \"../../../Types/EpisodeObj\";\r\n\r\nimport Title from \"../../Title/Title\";\r\nimport Gallery from \"../../Gallery/Gallery\";\r\nimport EpisodeForm from \"../../Forms/EpisodeForm/EpisodeForm\";\r\nimport NavLink from \"../../Header/NavLink/NavLink\";\r\n\r\ninterface AnimeViewProps {\r\n   list: AnimeObj[];\r\n   studioOptions: studioOption[];\r\n   onCreateEpisode: (AnimeId: number, newEpisodeElem: EpisodeObj, studioId: number) => void;\r\n   onEdit?: (id: number) => void;\r\n}\r\n\r\nconst AnimeView: React.FC<AnimeViewProps> = ({list, studioOptions, onCreateEpisode, onEdit}) => {\r\n   const {id: idString} = useParams<{id: string}>();\r\n   const id = parseFloat(idString);\r\n\r\n   const history = useHistory();\r\n\r\n   const handleViewStudio = (id: number) => () => {\r\n      history.push(`/studio-details/${id}`);\r\n   };\r\n\r\n   const handleCreateEpisodeElem = (newEpisodeElem: EpisodeObj, studioId: number) => {\r\n      onCreateEpisode(id, newEpisodeElem, studioId);\r\n   };\r\n\r\n   const handleEdit: React.MouseEventHandler<HTMLButtonElement> = () => {\r\n      if (onEdit) {\r\n         onEdit(id);\r\n      }\r\n   };\r\n\r\n   const handleShowForm: React.MouseEventHandler<HTMLButtonElement> = () => {\r\n      history.push(`/anime-details/${id}/new-episode`);\r\n   };\r\n\r\n   const elem = list.find((elem) => {\r\n      // return elem.id === parseInt(id);\r\n      if (elem.id === id) {\r\n         return true;\r\n      } else {\r\n         return false;\r\n      }\r\n   });\r\n\r\n   if (!elem) {\r\n      return <Redirect to=\"/404\" />;\r\n   }\r\n\r\n   return (\r\n      <article className=\"AnimeView\">\r\n         <section className=\"AnimeView__Info\">\r\n            <img className=\"AnimeView__Image\" src={elem.cover} alt=\"Anime--Cover.png\" />\r\n            <div className=\"AnimeView__Data\">\r\n               <p className=\"AnimeView__Name\">{elem.name}</p>\r\n               <div className=\"AnimeView__Tags\">\r\n                  {elem.tags.map((tag, i) => {\r\n                     return (\r\n                        <div className=\"AnimeView__Tag\" key={i}>\r\n                           {tag}\r\n                        </div>\r\n                     );\r\n                  })}\r\n               </div>\r\n               <p className=\"AnimeView__Description\">{elem.description}</p>\r\n               <p className=\"AnimeView__Studios\">\r\n                  <b> Studios: </b>\r\n                  {elem.studios.map((studio) => {\r\n                     return (\r\n                        <span key={studio.id} className=\"color clickable\" onClick={handleViewStudio(studio.id)}>\r\n                           {studio.name}\r\n                        </span>\r\n                     );\r\n                  })}\r\n               </p>\r\n               <p className=\"AnimeView__Status\">{elem.status}</p>\r\n            </div>\r\n         </section>\r\n         <section className=\"AnimeView__Episodes\">\r\n            <Title text=\"Episodes\" url={\"\"}></Title>\r\n            <Gallery type=\"Episode\" listEpisode={elem.episodes} />\r\n\r\n            <div className=\"AnimeView__Functions\">\r\n               <button className=\"Btn\" onClick={handleShowForm}>\r\n                  Add Episode\r\n               </button>\r\n\r\n               <button className=\"Btn\" onClick={handleEdit}>\r\n                  Edit Anime Info\r\n               </button>\r\n            </div>\r\n         </section>\r\n\r\n         <Route path=\"/anime-details/:id/new-episode\">\r\n            <EpisodeForm onCreate={handleCreateEpisodeElem} studioOptions={studioOptions} />\r\n         </Route>\r\n      </article>\r\n   );\r\n};\r\n\r\nexport default AnimeView;\r\n","import * as React from \"react\";\r\nimport \"./EpisodeView.css\";\r\nimport {Redirect, useParams} from \"react-router\";\r\nimport {EpisodeObj} from \"../../../Types/EpisodeObj\";\r\n\r\ninterface EpisodeViewProps {\r\n   list: EpisodeObj[];\r\n}\r\n\r\nconst EpisodeView: React.FC<EpisodeViewProps> = ({list}) => {\r\n   const {id: idString} = useParams<{id: string}>();\r\n   const id = parseFloat(idString);\r\n\r\n   const elem = list.find((elem) => {\r\n      // return elem.id === parseInt(id);\r\n      if (elem.id === id) {\r\n         return true;\r\n      } else {\r\n         return false;\r\n      }\r\n   });\r\n\r\n   if (!elem) {\r\n      return <Redirect to=\"/404\" />;\r\n   }\r\n   return (\r\n      <article className=\"EpisodeView\">\r\n         <section className=\"EpisodeView__Content\">\r\n            <div className=\"EpisodeView__Info\">\r\n               <img src={elem.thumbnail} alt=\"\" />\r\n               <div className=\"EpisodeView__Data\">\r\n                  <p className=\"EpisodeView__Anime\">{elem.anime?.name}</p>\r\n                  <p className=\"EpisodeView__Name\">\"{elem.name}\"</p>\r\n                  <p className=\"EpisodeView__Description\">{elem.description}</p>\r\n                  <p className=\"EpisodeView__Date\">{elem.date}</p>\r\n               </div>\r\n            </div>\r\n            <div className=\"EpisodeView__Player\">\r\n               <div className=\"EpisodeView__VideoContainer\">\r\n                  <iframe src={elem.videoUrl} className=\"EpisodeView__Video\" allow=\"autoplay\" />\r\n               </div>\r\n               <div className=\"EpisodeView__Controllers\">\r\n                  <div className=\"Btn--Icon Btn--Icon--left\">\r\n                     <button className=\"Btn\">Previous</button>\r\n                     <img className=\"Btn__Icon\" src={`${process.env.PUBLIC_URL}/images/General/leftIcon.svg`} alt=\"\" />\r\n                  </div>\r\n\r\n                  <div className=\"Btn--Box\">\r\n                     <button className=\"Btn Btn--Box\"></button>\r\n                     <img className=\"Btn__Icon\" src={`${process.env.PUBLIC_URL}/images/General/menuIcon.svg`} alt=\"\" />\r\n                  </div>\r\n\r\n                  <div className=\"Btn--Icon Btn--Icon--right\">\r\n                     <button className=\"Btn\">next</button>\r\n                     <img className=\"Btn__Icon\" src={`${process.env.PUBLIC_URL}/images/General/rightIcon.svg`} alt=\"\" />\r\n                  </div>\r\n               </div>\r\n            </div>\r\n         </section>\r\n         <hr />\r\n         <section className=\"EpisodeView__Adds\"></section>\r\n      </article>\r\n   );\r\n};\r\n\r\nexport default EpisodeView;\r\n","import {createTheme} from \"@mui/material/styles\";\r\n\r\nexport const theme = createTheme({\r\n   palette: {\r\n      primary: {\r\n         main: \"#c678dd\",\r\n      },\r\n      secondary: {\r\n         main: \"#f44336\",\r\n      },\r\n   },\r\n});\r\n","import * as React from \"react\";\r\nimport \"./StudioView.css\";\r\nimport {Redirect, useParams} from \"react-router\";\r\nimport {AnimeObj} from \"../../Types/AnimeObj\";\r\nimport {StudioObj} from \"../../Types/StudioObj\";\r\nimport Gallery from \"../Gallery/Gallery\";\r\nimport Title from \"../Title/Title\";\r\n\r\ninterface StudioViewProps {\r\n   listStudio: StudioObj[];\r\n}\r\n\r\nconst StudioView: React.FC<StudioViewProps> = ({listStudio}) => {\r\n   const {id: idString} = useParams<{id: string}>();\r\n   const id = parseFloat(idString);\r\n\r\n   const elemStudio = listStudio.find((elem) => {\r\n      // return elem.id === parseInt(id);\r\n      if (elem.id === id) {\r\n         return true;\r\n      } else {\r\n         return false;\r\n      }\r\n   });\r\n\r\n   if (!elemStudio) {\r\n      return <Redirect to=\"/404\" />;\r\n   }\r\n   return (\r\n      <article className=\"StudioView\">\r\n         <section className=\"StudioView__Info\">\r\n            <img className=\"StudioView__Logo\" src={elemStudio.logo} alt=\"\" />\r\n            <p className=\"StudioView__Name\">{elemStudio.name}</p>\r\n            <p className=\"StudioView__Description\">{elemStudio.description}</p>\r\n            <p className=\"StudioView__Date\">\r\n               <b> Founded:</b> {elemStudio.date}\r\n            </p>\r\n\r\n            <Title text=\"Best Animes\" url=\"\"></Title>\r\n            <Gallery type=\"Anime\" listAnime={elemStudio.animes}></Gallery>\r\n         </section>\r\n         <hr />\r\n         <section className=\"StudioView__News\"></section>\r\n      </article>\r\n   );\r\n};\r\n\r\nexport default StudioView;\r\n","import React, {useEffect} from \"react\";\nimport \"./App.css\";\nimport {Route, Switch, useHistory} from \"react-router-dom\";\n\nimport {BannerObj} from \"../../Types/BannerObj\";\nimport {AnimeObj} from \"../../Types/AnimeObj\";\nimport {EpisodeObj} from \"../../Types/EpisodeObj\";\nimport {TagOption} from \"../../Types/TagOption\";\nimport {StudioObj} from \"../../Types/StudioObj\";\n\nimport Gallery from \"../Gallery/Gallery\";\nimport Title from \"../Title/Title\";\nimport Header from \"../Header/Header\";\nimport Banner from \"../Banner/Banner\";\nimport AnimeForm from \"../Forms/AnimeForm/AnimeForm\";\nimport AnimeView from \"../AnimeComponents/AnimeView/AnimeView\";\nimport EpisodeView from \"../EpisodeComponents/EpisodeView/EpisodeView\";\n\n//utils\nimport {ThemeProvider} from \"@emotion/react\";\nimport {theme} from \"../../utils/Theme\";\nimport StudioView from \"../StudioView/StudioView\";\nimport {studioOption} from \"../../Types/StudiosOption\";\n\nfunction App() {\n   //react variables\n   const history = useHistory();\n\n   // forms states anf functions\n   const [animeFormType, setAnimeFormType] = React.useState<\"create\" | \"edit\">(\"create\");\n   const [animeEditId, setAnimeEditId] = React.useState<number | null>(null);\n\n   const handleEditAnime = (editId: number, newAnimeElem: AnimeObj) => {\n      const animeIndex = animeElems.findIndex((anime) => {\n         if (anime.id === editId) {\n            return true;\n         }\n         return false;\n      });\n\n      animeElems[animeIndex] = newAnimeElem;\n\n      setAnimeFormType(\"create\");\n      setAnimeEditId(null);\n   };\n\n   const handleBeginEditAnime = (editId: number) => {\n      setAnimeEditId(editId);\n      setAnimeFormType(\"edit\");\n      history.push(\"/Forms\");\n   };\n\n   // array collections and states\n   const animesBanner: BannerObj[] = [\n      {\n         id: 0,\n         img: `${process.env.PUBLIC_URL}/images/Banners/banner-naruto.png`,\n         name: \"Boruto: Naruto Next Generations\",\n      },\n      {\n         id: 1,\n         img: `${process.env.PUBLIC_URL}/images/Banners/banner-naruto.png`,\n         name: \"Naruto\",\n      },\n      {\n         id: 2,\n         img: `${process.env.PUBLIC_URL}/images/Banners/banner-naruto.png`,\n         name: \"Jujutsu Kaisen\",\n      },\n   ];\n\n   const [studioElems, setStudioElems] = React.useState<StudioObj[]>([\n      {\n         id: 0,\n         name: \"Mappa\",\n         logo: `${process.env.PUBLIC_URL}/images/StudiosLogos/Mappa_Logo.svg`,\n         description: `MAPPA Co, Ltd. (Japanese: 株式会社MAPPA, Hepburn: Kabushiki-gaisha MAPPA) is a Japanese animation studio. The studio has produced anime works including Kids on the Slope, Terror in Resonance, Yuri!!! on Ice, In This Corner of the World, Kakegurui, Banana Fish, Zombieland Saga, Dororo, Dorohedoro, Jujutsu Kaisen and the final season of Attack on Titan.\n         \"MAPPA\" is an acronym for Maruyama Animation Produce Project Association. It was founded on June 14, 2011, by Masao Maruyama, a founder and former producer of Madhouse In April 2016, Maruyama resigned his position in the studio and founded a new studio, Studio M2`,\n         date: \"June 14, 2011\",\n         animes: [],\n      },\n      {\n         id: 1,\n         name: \"Bones\",\n         logo: `${process.env.PUBLIC_URL}/images/StudiosLogos/Bones_logo.svg`,\n         description: `Bones was founded by Sunrise staff members Masahiko Minami, Hiroshi Ōsaka and Toshihiro Kawamoto in October 1998. One of their first projects was collaborating with Sunrise on Cowboy Bebop: Knockin' on Heaven's Door, a feature film based on the Cowboy Bebop anime series.\n         In 2007, the studio suffered the loss of co-founder Hiroshi Ōsaka, well known for his works as character designer on series such as Mobile Suit Victory Gundam, Mobile Fighter G Gundam and The Mars Daybreak. Ōsaka had been battling with cancer, and died from the disease on September 24, 2007. He was 44 years old.`,\n         date: \"October 1998\",\n         animes: [],\n      },\n   ]);\n\n   const [episodeElems, setEpisodeElems] = React.useState<EpisodeObj[]>([\n      {\n         id: 0,\n         number: 1,\n         name: \"Ryomen Sukuna\",\n         description:\n            \"Yuuji es un joven que posee un talismán muy poderoso y él ni siquiera es consciente de ello. Pero un día se topa con Fushiguro y su vida dará un cambio radical.\",\n         date: \"Oct 2, 2020\",\n         thumbnail: `${process.env.PUBLIC_URL}/images/Thumbnails/jujutsu/jujutsu_episode_1.jpg`,\n         videoUrl: \"https://drive.google.com/file/d/15mi9p2nT10lqj9qJEPHwhnFsGV0U9ohO/preview\",\n         anime: undefined,\n         studio: studioElems[0],\n      },\n      {\n         id: 1,\n         number: 2,\n         name: \"Por mí\",\n         description:\n            \"El hecho de comerse el dedo de Sukuna le supondrá un grave problema a Yuuji, puesto que ahora tienen que ejecutarlo. Pero tiene un modo temporal de salvarse.\",\n         date: \"Oct 9, 2020\",\n         thumbnail: `${process.env.PUBLIC_URL}/images/Thumbnails/jujutsu/jujutsu_episode_2.jpg`,\n         videoUrl: \"https://drive.google.com/file/d/14tAZoa0yUvWWSKZVlB10SDZ3cvwR3gdn/preview\",\n         anime: undefined,\n         studio: studioElems[0],\n      },\n      {\n         id: 2,\n         number: 3,\n         name: \"Chica de acero\",\n         description:\n            \"Yuuji deberá demostrar que es apto para formar parte de la Preparatoria de Hechicería. Además, conocerán a la tercera integrante del equipo.\",\n         date: \"Oct 16, 2020\",\n         thumbnail: `${process.env.PUBLIC_URL}/images/Thumbnails/jujutsu/jujutsu_episode_3.jpg`,\n         videoUrl: \"https://drive.google.com/file/d/1zOoi8-LnWdqh3WgsMrRDsLLri3H3CB9D/preview\",\n         anime: undefined,\n         studio: studioElems[0],\n      },\n   ]);\n\n   const [animeElems, setAnimeElems] = React.useState<AnimeObj[]>([\n      {\n         id: Math.random(),\n         name: \"Jujutsu Kaisen\",\n         cover: `${process.env.PUBLIC_URL}/images/Covers/jujutsu-kaisen-cover.png`,\n         description: `Yuji Itadori is a boy with tremendous physical strength, though he lives a completely ordinary high school life. \n               One day, to save a classmate who has been attacked by curses, he eats the finger of Ryomen Sukuna, taking the curse into his own soul. \n               From then on, he shares one body with Ryomen Sukuna. Guided by the most powerful of sorcerers, Satoru Gojo, Itadori is admitted to Tokyo Jujutsu High School, \n               an organization that fights the curses... and thus begins the heroic tale of a boy who became a curse to exorcise a curse, a life from which he could never turn back.`,\n         status: \"Finish\",\n         tags: [\"Action\", \"Shonen\", \"Supernatural\"],\n         episodes: [episodeElems[0], episodeElems[1], episodeElems[2]],\n         studios: [studioElems[0]],\n      },\n   ]);\n\n   episodeElems[0].anime = animeElems[0];\n   episodeElems[1].anime = animeElems[0];\n   episodeElems[2].anime = animeElems[0];\n\n   studioElems[0].animes = [animeElems[0]];\n\n   const [tagOptions, setTagOptions] = React.useState<TagOption[]>([\n      {label: \"test 1\"},\n      {label: \"test 2\"},\n      {label: \"Animals\"},\n   ]);\n\n   const initialStudioOptions: studioOption[] = studioElems.map((studio) => {\n      return {label: studio.name, id: studio.id};\n   });\n\n   const [studioOptions, setStudioOptions] = React.useState<studioOption[]>(initialStudioOptions);\n\n   // functions\n   const handleAddTagOption = (newTagOption: TagOption) => {\n      setTagOptions([...tagOptions, newTagOption]);\n   };\n\n   const handleAddStudioOption = (newStudioOption: studioOption) => {\n      setStudioOptions([...studioOptions, newStudioOption]);\n   };\n\n   const handleCreateAnime = (newAnimeElem: AnimeObj) => {\n      console.log(\"nuevo elemento!\", newAnimeElem);\n      // creamos un nuevo arreglo\n      const arrayCopy = [\n         ...animeElems, // ponemos todos los elementos que ya existían\n         newAnimeElem,\n      ];\n      setAnimeElems(arrayCopy);\n   };\n\n   const handleCreateEpisode = (animeId: number, newEpisodeElem: EpisodeObj, studioId: number) => {\n      // creamos un nuevo arreglo\n      const animeIndex = animeElems.findIndex((anime) => {\n         if (anime.id === animeId) {\n            return true;\n         }\n         return false;\n      });\n\n      const studioIndex = studioElems.findIndex((studio) => {\n         if (studio.id === studioId) {\n            return true;\n         }\n         return false;\n      });\n\n      //link episode\n\n      newEpisodeElem.anime = animeElems[animeIndex];\n      newEpisodeElem.studio = studioElems[studioIndex];\n\n      const episodesCopy = [\n         ...episodeElems, // ponemos todos los elementos que ya existían\n         newEpisodeElem,\n      ];\n\n      setEpisodeElems(episodesCopy);\n\n      //link anime\n\n      animeElems[animeIndex].episodes = [...animeElems[animeIndex].episodes, newEpisodeElem];\n\n      let studioExist: boolean = false;\n\n      animeElems[animeIndex].studios.map((studio) => {\n         if (studio.id === studioId) {\n            studioExist = true;\n         }\n      });\n\n      if (!studioExist) {\n         animeElems[animeIndex].studios = [...animeElems[animeIndex].studios, studioElems[studioIndex]];\n      }\n\n      //link studio\n      let animeExist: boolean = false;\n\n      studioElems[studioIndex].animes.map((anime) => {\n         if (anime.id === animeId) {\n            animeExist = true;\n         }\n      });\n\n      console.log(animeExist, animeElems[animeIndex]);\n\n      if (!animeExist) {\n         studioElems[studioIndex].animes = [...studioElems[studioIndex].animes, animeElems[animeIndex]];\n      }\n\n      console.log(studioElems[studioIndex]);\n   };\n\n   return (\n      <ThemeProvider theme={theme}>\n         <Header />\n\n         <Switch>\n            <Route exact path=\"/\">\n               <Banner animeList={animesBanner} />\n               <article className=\"Main\">\n                  <section className=\"Main__Content\">\n                     <Title text=\"Latest Episodes\" url=\"\" />\n\n                     <Gallery type=\"Episode\" listEpisode={episodeElems} />\n\n                     <Title text=\"Latest Animes\" url=\"\" />\n\n                     <Gallery type=\"Anime\" listAnime={animeElems} withoutPadding />\n                  </section>\n                  <hr />\n                  <section className=\"Main__News\"></section>\n               </article>\n            </Route>\n\n            <Route path=\"/anime-details/:id\">\n               <AnimeView\n                  list={animeElems}\n                  studioOptions={studioOptions}\n                  onCreateEpisode={handleCreateEpisode}\n                  onEdit={handleBeginEditAnime}\n               />\n            </Route>\n\n            <Route path=\"/episode-details/:id\">\n               <EpisodeView list={episodeElems} />\n            </Route>\n\n            <Route path=\"/studio-details/:id\">\n               <StudioView listStudio={studioElems} />\n            </Route>\n\n            <Route path=\"/Forms\">\n               <AnimeForm\n                  animeElems={animeElems}\n                  onCreate={handleCreateAnime}\n                  tagOptions={tagOptions}\n                  addTagOption={handleAddTagOption}\n                  type={animeFormType}\n                  editId={animeEditId}\n                  onEdit={handleEditAnime}\n               />\n            </Route>\n\n            <Route path=\"/Studios\">\n               <Title text=\"Studios\" url=\"\" />\n            </Route>\n         </Switch>\n      </ThemeProvider>\n   );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App/App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n   <React.StrictMode>\n      <HashRouter>\n         <App />\n      </HashRouter>\n   </React.StrictMode>,\n   document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}